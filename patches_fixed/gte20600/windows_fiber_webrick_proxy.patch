Patch by MSP-Greg
Revert 62966, which shows a new issue with Fiber when running under Windows
Note that 62966 has passed many builds on Travis, so it seems functional
diff --git a/lib/webrick/httpproxy.rb b/lib/webrick/httpproxy.rb
index d180ff4831..be5531fec0 100644
--- a/lib/webrick/httpproxy.rb
+++ b/lib/webrick/httpproxy.rb
@@ -211,15 +211,21 @@ def do_CONNECT(req, res)
     end
 
     def do_GET(req, res)
-      perform_proxy_request(req, res, Net::HTTP::Get)
+      perform_proxy_request(req, res) do |http, path, header|
+        http.get(path, header)
+      end
     end
 
     def do_HEAD(req, res)
-      perform_proxy_request(req, res, Net::HTTP::Head)
+      perform_proxy_request(req, res) do |http, path, header|
+        http.head(path, header)
+      end
     end
 
     def do_POST(req, res)
-      perform_proxy_request(req, res, Net::HTTP::Post, req.body_reader)
+      perform_proxy_request(req, res) do |http, path, header|
+        http.post(path, req.body || "", header)
+      end
     end
 
     def do_OPTIONS(req, res)
@@ -295,56 +301,38 @@ def setup_upstream_proxy_authentication(req, res, header)
       return FakeProxyURI
     end
 
-    def perform_proxy_request(req, res, req_class, body_stream = nil)
+    def perform_proxy_request(req, res)
       uri = req.request_uri
       path = uri.path.dup
       path << "?" << uri.query if uri.query
       header = setup_proxy_header(req, res)
       upstream = setup_upstream_proxy_authentication(req, res, header)
+      response = nil
 
-      body_tmp = []
       http = Net::HTTP.new(uri.host, uri.port, upstream.host, upstream.port)
-      req_fib = Fiber.new do
-        http.start do
-          if @config[:ProxyTimeout]
-            ##################################   these issues are
-            http.open_timeout = 30   # secs  #   necessary (maybe because
-            http.read_timeout = 60   # secs  #   Ruby's bug, but why?)
-            ##################################
-          end
-          if body_stream && req['transfer-encoding'] =~ /\bchunked\b/i
-            header['Transfer-Encoding'] = 'chunked'
-          end
-          http_req = req_class.new(path, header)
-          http_req.body_stream = body_stream if body_stream
-          http.request(http_req) do |response|
-            # Persistent connection requirements are mysterious for me.
-            # So I will close the connection in every response.
-            res['proxy-connection'] = "close"
-            res['connection'] = "close"
-
-            # stream Net::HTTP::HTTPResponse to WEBrick::HTTPResponse
-            res.status = response.code.to_i
-            res.chunked = response.chunked?
-            choose_header(response, res)
-            set_cookie(response, res)
-            set_via(res)
-            response.read_body do |buf|
-              body_tmp << buf
-              Fiber.yield # wait for res.body Proc#call
-            end
-          end # http.request
-        end
-      end
-      req_fib.resume # read HTTP response headers and first chunk of the body
-      res.body = ->(socket) do
-        while buf = body_tmp.shift
-          socket.write(buf)
-          buf.clear
-          req_fib.resume # continue response.read_body
+      http.start do
+        if @config[:ProxyTimeout]
+          ##################################   these issues are
+          http.open_timeout = 30   # secs  #   necessary (maybe because
+          http.read_timeout = 60   # secs  #   Ruby's bug, but why?)
+          ##################################
         end
+        response = yield(http, path, header)
       end
+
+      # Persistent connection requirements are mysterious for me.
+      # So I will close the connection in every response.
+      res['proxy-connection'] = "close"
+      res['connection'] = "close"
+
+      # Convert Net::HTTP::HTTPResponse to WEBrick::HTTPResponse
+      res.status = response.code.to_i
+      choose_header(response, res)
+      set_cookie(response, res)
+      set_via(res)
+      res.body = response.body
     end
+
     # :stopdoc:
   end
 end
index d8b44644f7..a233e68e09 100644
--- a/test/runner.rb
+++ b/test/runner.rb
@@ -10,7 +10,7 @@
   .reject {|f| f =~ /minitest|test-unit|power_assert/ }
   .map {|f| $LOAD_PATH.unshift File.join(File.dirname(f), "lib") }
 
-require 'test/unit'
+require_relative './lib/test/unit'
 
 module Gem
 end
diff --git a/test/webrick/test_httpproxy.rb b/test/webrick/test_httpproxy.rb
index b165a924d8..4f73cada50 100644
--- a/test/webrick/test_httpproxy.rb
+++ b/test/webrick/test_httpproxy.rb
@@ -172,7 +172,7 @@ def test_big_bodies
           assert_equal exp, dig.hexdigest
         end
         http.request_get('/') do |res|
-          assert_predicate res, :chunked?
+#          assert_predicate res, :chunked?
           dig = Digest::MD5.new
           res.read_body { |buf| dig.update(buf); buf.clear }
           assert_equal exp, dig.hexdigest
